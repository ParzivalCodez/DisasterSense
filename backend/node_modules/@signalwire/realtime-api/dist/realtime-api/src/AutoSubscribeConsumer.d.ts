import { BaseComponentOptions, BaseConsumer, EventEmitter } from '@signalwire/core';
export declare class AutoSubscribeConsumer<EventTypes extends EventEmitter.ValidEventTypes> extends BaseConsumer<EventTypes> {
    /** @internal */
    private debouncedSubscribe;
    constructor(options: BaseComponentOptions);
    /** @internal */
    protected getSubscriptions(): EventEmitter.EventNames<EventTypes>[];
    on<T extends EventEmitter.EventNames<EventTypes>>(event: T, fn: EventEmitter.EventListener<EventTypes, T>): EventEmitter<EventTypes, any>;
    once<T extends EventEmitter.EventNames<EventTypes>>(event: T, fn: EventEmitter.EventListener<EventTypes, T>): EventEmitter<EventTypes, any>;
    off<T extends EventEmitter.EventNames<EventTypes>>(event: T, fn: EventEmitter.EventListener<EventTypes, T>): EventEmitter<EventTypes, any>;
}
//# sourceMappingURL=AutoSubscribeConsumer.d.ts.map