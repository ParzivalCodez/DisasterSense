import { BaseComponentOptionsWithPayload, VoiceCallRecordingContract, CallingCallRecordEventParams, EventEmitter, BaseConsumer, CallingCallRecordPauseMethodParams } from '@signalwire/core';
/**
 * Instances of this class allow you to control (e.g., resume) the
 * recording inside a Voice Call. You can obtain instances of this class by
 * starting a recording from the desired {@link Call} (see
 * {@link Call.record})
 */
export interface CallRecording extends VoiceCallRecordingContract {
    setPayload: (payload: CallingCallRecordEventParams) => void;
    _paused: boolean;
    /** @internal */
    emit(event: EventEmitter.EventNames<any>, ...args: any[]): void;
}
export declare type CallRecordingEventsHandlerMapping = {};
export interface CallRecordingOptions extends BaseComponentOptionsWithPayload<CallingCallRecordEventParams> {
}
export declare class CallRecordingAPI extends BaseConsumer<CallRecordingEventsHandlerMapping> implements VoiceCallRecordingContract {
    _paused: boolean;
    private _payload;
    constructor(options: CallRecordingOptions);
    get id(): string;
    get callId(): string;
    get nodeId(): string;
    get controlId(): string;
    get state(): import("@signalwire/core").CallingCallRecordState;
    get url(): string | undefined;
    get size(): number | undefined;
    get duration(): number | undefined;
    get record(): any;
    /** @internal */
    protected setPayload(payload: CallingCallRecordEventParams): void;
    pause(params?: CallingCallRecordPauseMethodParams): Promise<this>;
    resume(): Promise<this>;
    stop(): Promise<this>;
    ended(): Promise<this>;
}
export declare const createCallRecordingObject: (params: CallRecordingOptions) => CallRecording;
//# sourceMappingURL=CallRecording.d.ts.map