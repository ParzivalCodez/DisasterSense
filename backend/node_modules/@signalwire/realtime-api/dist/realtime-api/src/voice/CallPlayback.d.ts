import { VoiceCallPlaybackContract, CallingCallPlayEventParams, BaseConsumer, BaseComponentOptionsWithPayload, EventEmitter } from '@signalwire/core';
/**
 * Instances of this class allow you to control (e.g., pause, resume, stop) the
 * playback inside a Voice Call. You can obtain instances of this class by
 * starting a playback from the desired {@link Call} (see
 * {@link Call.play})
 */
export interface CallPlayback extends VoiceCallPlaybackContract {
    setPayload: (payload: CallingCallPlayEventParams) => void;
    _paused: boolean;
    /** @internal */
    emit(event: EventEmitter.EventNames<any>, ...args: any[]): void;
}
export declare type CallPlaybackEventsHandlerMapping = {};
export interface CallPlaybackOptions extends BaseComponentOptionsWithPayload<CallingCallPlayEventParams> {
}
export declare class CallPlaybackAPI extends BaseConsumer<CallPlaybackEventsHandlerMapping> implements VoiceCallPlaybackContract {
    _paused: boolean;
    private _volume;
    private _payload;
    constructor(options: CallPlaybackOptions);
    get id(): string;
    get volume(): number;
    get callId(): string;
    get nodeId(): string;
    get controlId(): string;
    get state(): import("@signalwire/core").CallingCallPlayState;
    /** @internal */
    protected setPayload(payload: CallingCallPlayEventParams): void;
    pause(): Promise<this>;
    resume(): Promise<this>;
    stop(): Promise<this>;
    setVolume(volume: number): Promise<this>;
    /** @deprecated */
    waitForEnded(): Promise<this>;
    ended(): Promise<this>;
}
export declare const createCallPlaybackObject: (params: CallPlaybackOptions) => CallPlayback;
//# sourceMappingURL=CallPlayback.d.ts.map