import { BaseComponentOptionsWithPayload, VoiceCallDetectContract, CallingCallDetectEventParams, BaseConsumer, EventEmitter } from '@signalwire/core';
/**
 * Instances of this class allow you to control (e.g., resume) the
 * detect inside a Voice Call. You can obtain instances of this class by
 * starting a Detect from the desired {@link Call} (see
 * {@link Call.detect})
 */
export interface CallDetect extends VoiceCallDetectContract {
    setPayload: (payload: CallingCallDetectEventParams) => void;
    waitingForReady: boolean;
    waitForBeep: boolean;
    /** @internal */
    emit(event: EventEmitter.EventNames<any>, ...args: any[]): void;
}
export declare type CallDetectEventsHandlerMapping = {};
export interface CallDetectOptions extends BaseComponentOptionsWithPayload<CallingCallDetectEventParams> {
}
export declare class CallDetectAPI extends BaseConsumer<CallDetectEventsHandlerMapping> implements VoiceCallDetectContract {
    private _payload;
    private _waitForBeep;
    private _result;
    constructor(options: CallDetectOptions);
    get id(): string;
    get controlId(): string;
    get callId(): string;
    get nodeId(): string;
    get detect(): import("@signalwire/core").Detector | undefined;
    get type(): "machine" | "fax" | "digit" | undefined;
    get result(): "0" | "1" | "2" | "3" | "4" | "5" | "CED" | "CNG" | ("error" | "finished") | "MACHINE" | "HUMAN" | "UNKNOWN" | "READY" | "NOT_READY" | "6" | "7" | "8" | "9" | "#" | "*";
    get waitForBeep(): boolean;
    get beep(): boolean | undefined;
    /** @internal */
    protected setPayload(payload: CallingCallDetectEventParams): void;
    stop(): Promise<this>;
    /** @deprecated */
    waitForResult(): Promise<this>;
    ended(): Promise<this>;
    private _lastEvent;
}
export declare const createCallDetectObject: (params: CallDetectOptions) => CallDetect;
//# sourceMappingURL=CallDetect.d.ts.map