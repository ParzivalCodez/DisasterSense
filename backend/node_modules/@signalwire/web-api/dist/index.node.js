var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  validateRequest: () => validateRequest
});
module.exports = __toCommonJS(src_exports);

// src/validateRequest.ts
var import_node_crypto = require("crypto");
var import_compatibility_api = require("@signalwire/compatibility-api");
var validateRequest = (privateKey, header, url, rawBody) => {
  if (typeof rawBody !== "string") {
    throw new TypeError(`"rawBody" is not a string. You may need to JSON.stringify the request body.`);
  }
  const hmac = (0, import_node_crypto.createHmac)("sha1", privateKey);
  hmac.update(`${url}${rawBody}`);
  const valid = hmac.digest("hex") === header;
  if (valid) {
    return true;
  }
  const parsedBody = JSON.parse(rawBody);
  return import_compatibility_api.RestClient.validateRequest(privateKey, header, url, parsedBody, true);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  validateRequest
});
//# sourceMappingURL=index.node.js.map
