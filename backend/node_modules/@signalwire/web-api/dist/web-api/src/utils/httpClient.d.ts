import { RequestInit, Response } from 'node-fetch';
interface InternalHttpResponse<T> extends Response {
    parsedBody?: T;
}
declare function http<T>(input: string, init: RequestInit | undefined): Promise<InternalHttpResponse<T>>;
interface CreateHttpClientOptions extends RequestInit {
    baseUrl: string;
    /**
     * Timeout in milliseconds
     */
    timeout?: number;
}
interface HttpClientRequestInit extends Omit<RequestInit, 'body'> {
    body?: Record<string, unknown>;
    searchParams?: Record<string, any>;
}
export declare const createHttpClient: ({ baseUrl, timeout, ...globalOptions }: CreateHttpClientOptions, fetcher?: typeof http) => <T>(path: string, options?: HttpClientRequestInit) => Promise<{
    body: T;
}>;
export declare const getRequestInit: (options: any) => RequestInit;
export declare const getUrl: ({ path, baseUrl, searchParams, }: {
    baseUrl: string;
    path: string;
    searchParams?: Record<string, any> | undefined;
}) => string;
export {};
//# sourceMappingURL=httpClient.d.ts.map