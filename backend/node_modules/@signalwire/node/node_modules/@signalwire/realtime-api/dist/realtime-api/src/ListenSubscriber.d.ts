import { EventEmitter } from '@signalwire/core';
import type { Client } from './client/Client';
import { SWClient } from './SWClient';
export declare type ListenersKeys<T> = keyof T;
export declare type ListenerMapValue<T> = {
    topics?: Set<string>;
    listeners: T;
    unsub: () => Promise<void>;
};
export declare type ListenerMap<T> = Map<string, ListenerMapValue<T>>;
export declare class ListenSubscriber<T extends {}, EventTypes extends EventEmitter.ValidEventTypes> {
    /** @internal */
    _sw: SWClient;
    protected _client: Client;
    protected _listenerMap: ListenerMap<T>;
    protected _eventMap: Record<keyof T, keyof EventTypes>;
    private _emitter;
    constructor(options: {
        swClient: SWClient;
    });
    protected get emitter(): EventEmitter<EventTypes, any>;
    protected eventNames(): EventEmitter.EventNames<EventTypes>[];
    /** @internal */
    emit<T extends EventEmitter.EventNames<EventTypes>>(event: T, ...args: EventEmitter.EventArgs<EventTypes, T>): boolean;
    protected on<E extends EventEmitter.EventNames<EventTypes>>(event: E, fn: EventEmitter.EventListener<EventTypes, E>): EventEmitter<EventTypes, any>;
    protected once<T extends EventEmitter.EventNames<EventTypes>>(event: T, fn: EventEmitter.EventListener<EventTypes, T>): EventEmitter<EventTypes, any>;
    protected off<T extends EventEmitter.EventNames<EventTypes>>(event: T, fn?: EventEmitter.EventListener<EventTypes, T>): EventEmitter<EventTypes, any>;
    listen(listeners: T): Promise<() => Promise<void>>;
    protected subscribe(listeners: T): Promise<() => Promise<void>>;
    protected _attachListeners(listeners: T): void;
    protected _detachListeners(listeners: T): void;
    protected addToListenerMap(id: string, value: ListenerMapValue<T>): ListenerMap<T>;
    protected removeFromListenerMap(id: string): boolean;
}
//# sourceMappingURL=ListenSubscriber.d.ts.map