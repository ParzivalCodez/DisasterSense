/**
 * Once we have new interface for Browser SDK;
 * RoomSessionStream in core should be removed
 * RoomSessionStream in realtime-api should be moved to core
 */
import type { VideoStreamEventParams, VideoStreamMethods } from '@signalwire/core';
import { RoomSession } from '../RoomSession';
import { RealTimeRoomStreamEvents, RealTimeRoomStreamListeners, RealtimeRoomStreamListenersEventsMapping } from '../../types';
import { ListenSubscriber } from '../../ListenSubscriber';
export interface RoomSessionStreamOptions {
    roomSession: RoomSession;
    payload: VideoStreamEventParams;
}
export declare class RoomSessionStream extends ListenSubscriber<RealTimeRoomStreamListeners, RealTimeRoomStreamEvents> implements VideoStreamMethods {
    private _payload;
    protected _eventMap: RealtimeRoomStreamListenersEventsMapping;
    constructor(options: RoomSessionStreamOptions);
    get id(): string;
    get roomId(): string;
    get roomSessionId(): string;
    get state(): "completed" | "streaming";
    get duration(): number | undefined;
    get url(): string | undefined;
    get startedAt(): Date | undefined;
    get endedAt(): Date | undefined;
    get hasEnded(): boolean;
    /** @internal */
    setPayload(payload: VideoStreamEventParams): void;
    stop(): Promise<void>;
}
//# sourceMappingURL=RoomSessionStream.d.ts.map