import { UserOptions } from '@signalwire/core';
export declare const setupInternals: (userOptions: {
    project: string;
    token: string;
    logLevel?: UserOptions['logLevel'];
}) => {
    store: {
        runSaga: <T>(saga: import("@redux-saga/types").Saga<any[]>, args: {
            instance: T;
            runSaga: any;
        }) => import("@redux-saga/types").Task<any>;
        channels: import("@signalwire/core").InternalChannels;
        instanceMap: {
            get: <T_1 extends unknown>(key: string) => T_1;
            set: <T_2 extends unknown>(key: string, value: T_2) => Map<string, unknown>;
            remove: (key: string) => Map<string, unknown>;
            getAll: () => [string, unknown][];
            deleteAll: () => Map<string, unknown>;
        };
        callSegments: import("@signalwire/core").CallSegmentContract[];
        sessionEmitter: import("eventemitter3").EventEmitter<import("@signalwire/core").ClientEvents, any>;
        dispatch: import("redux").Dispatch<import("redux").AnyAction>;
        getState(): any;
        subscribe(listener: () => void): import("redux").Unsubscribe;
        replaceReducer(nextReducer: import("redux").Reducer<any, import("redux").AnyAction>): void;
        [Symbol.observable](): import("redux").Observable<any>;
    };
    emitter: import("eventemitter3").EventEmitter<any, any>;
};
interface GetCredentialsOptions {
    token?: string;
    project?: string;
}
export declare const getCredentials: (options?: GetCredentialsOptions) => {
    project: string;
    token: string;
};
export declare const prefixEvent: (prefix: string, event: string) => string;
export {};
//# sourceMappingURL=internals.d.ts.map