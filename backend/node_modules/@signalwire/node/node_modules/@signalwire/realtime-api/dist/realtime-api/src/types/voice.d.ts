import type { CallReceived, CallState, CallPlaybackStarted, CallPlaybackUpdated, CallPlaybackEnded, CallPlaybackFailed, CallRecordingStarted, CallRecordingUpdated, CallRecordingEnded, CallRecordingFailed, CallPromptStarted, CallPromptUpdated, CallPromptEnded, CallPromptFailed, CallTapStarted, CallTapEnded, CallCollectStarted, CallCollectStartOfInput, CallCollectUpdated, CallCollectEnded, CallCollectFailed, VoiceCallPlayAudioMethodParams, VoiceCallPlaySilenceMethodParams, VoiceCallPlayRingtoneMethodParams, VoiceCallPlayTTSMethodParams, VoicePlaylist, VoiceCallRecordMethodParams, VoiceCallPromptTTSMethodParams, VoiceCallPromptRingtoneMethodParams, VoiceCallPromptAudioMethodParams, VoiceCallPromptMethodParams, VoiceCallCollectMethodParams, VoiceCallTapMethodParams, VoiceCallTapAudioMethodParams, CallDetectStarted, CallDetectEnded, CallDetectUpdated, VoiceCallDetectMethodParams, VoiceCallDetectMachineParams, VoiceCallDetectFaxParams, VoiceCallDetectDigitParams, VoiceDialerParams, VoiceCallDialPhoneMethodParams, VoiceCallDialSipMethodParams } from '@signalwire/core';
import type { Call } from '../voice/Call';
import type { CallPlayback } from '../voice/CallPlayback';
import type { CallRecording } from '../voice/CallRecording';
import type { CallPrompt } from '../voice/CallPrompt';
import type { CallTap } from '../voice/CallTap';
import type { CallCollect } from '../voice/CallCollect';
import type { CallDetect } from '../voice/CallDetect';
/**
 * Voice API
 */
export interface VoiceListeners {
    onCallReceived?: (call: Call) => unknown;
}
export declare type VoiceEvents = Record<CallReceived, (call: Call) => void>;
export declare type VoiceListenersEventsMapping = Record<'onCallReceived', CallReceived>;
export interface VoiceMethodsListeners {
    listen?: RealTimeCallListeners;
}
export declare type VoiceDialMethodParams = VoiceDialerParams & VoiceMethodsListeners;
export declare type VoiceDialPhonelMethodParams = VoiceCallDialPhoneMethodParams & VoiceMethodsListeners;
export declare type VoiceDialSipMethodParams = VoiceCallDialSipMethodParams & VoiceMethodsListeners;
/**
 * Call API
 */
export interface RealTimeCallListeners {
    onStateChanged?: (call: Call) => unknown;
    onPlaybackStarted?: (playback: CallPlayback) => unknown;
    onPlaybackUpdated?: (playback: CallPlayback) => unknown;
    onPlaybackFailed?: (playback: CallPlayback) => unknown;
    onPlaybackEnded?: (playback: CallPlayback) => unknown;
    onRecordingStarted?: (recording: CallRecording) => unknown;
    onRecordingFailed?: (recording: CallRecording) => unknown;
    onRecordingEnded?: (recording: CallRecording) => unknown;
    onPromptStarted?: (prompt: CallPrompt) => unknown;
    onPromptUpdated?: (prompt: CallPrompt) => unknown;
    onPromptFailed?: (prompt: CallPrompt) => unknown;
    onPromptEnded?: (prompt: CallPrompt) => unknown;
    onCollectStarted?: (collect: CallCollect) => unknown;
    onCollectInputStarted?: (collect: CallCollect) => unknown;
    onCollectUpdated?: (collect: CallCollect) => unknown;
    onCollectFailed?: (collect: CallCollect) => unknown;
    onCollectEnded?: (collect: CallCollect) => unknown;
    onTapStarted?: (collect: CallTap) => unknown;
    onTapEnded?: (collect: CallTap) => unknown;
    onDetectStarted?: (collect: CallDetect) => unknown;
    onDetectUpdated?: (collect: CallDetect) => unknown;
    onDetectEnded?: (collect: CallDetect) => unknown;
}
export declare type RealTimeCallListenersKeys = keyof RealTimeCallListeners;
export declare type RealTimeCallEventsHandlerMapping = Record<CallState, (call: Call) => void> & Record<CallPlaybackStarted | CallPlaybackUpdated | CallPlaybackEnded | CallPlaybackFailed, (playback: CallPlayback) => void> & Record<CallRecordingStarted | CallRecordingUpdated | CallRecordingEnded | CallRecordingFailed, (recording: CallRecording) => void> & Record<CallPromptStarted | CallPromptUpdated | CallPromptEnded | CallPromptFailed, (prompt: CallPrompt) => void> & Record<CallCollectStarted | CallCollectStartOfInput | CallCollectUpdated | CallCollectEnded | CallCollectFailed, (callCollect: CallCollect) => void> & Record<CallTapStarted | CallTapEnded, (tap: CallTap) => void> & Record<CallDetectStarted | CallDetectUpdated | CallDetectEnded, (detect: CallDetect) => void>;
export declare type RealTimeCallEvents = {
    [k in keyof RealTimeCallEventsHandlerMapping]: RealTimeCallEventsHandlerMapping[k];
};
export declare type RealtimeCallListenersEventsMapping = Record<'onStateChanged', CallState> & Record<'onPlaybackStarted', CallPlaybackStarted> & Record<'onPlaybackUpdated', CallPlaybackUpdated> & Record<'onPlaybackFailed', CallPlaybackFailed> & Record<'onPlaybackEnded', CallPlaybackEnded> & Record<'onRecordingStarted', CallRecordingStarted> & Record<'onRecordingUpdated', CallRecordingUpdated> & Record<'onRecordingFailed', CallRecordingFailed> & Record<'onRecordingEnded', CallRecordingEnded> & Record<'onPromptStarted', CallPromptStarted> & Record<'onPromptUpdated', CallPromptUpdated> & Record<'onPromptFailed', CallPromptFailed> & Record<'onPromptEnded', CallPromptEnded> & Record<'onCollectStarted', CallCollectStarted> & Record<'onCollectInputStarted', CallCollectStartOfInput> & Record<'onCollectUpdated', CallCollectUpdated> & Record<'onCollectFailed', CallCollectFailed> & Record<'onCollectEnded', CallCollectEnded> & Record<'onTapStarted', CallTapStarted> & Record<'onTapEnded', CallTapEnded> & Record<'onDetectStarted', CallDetectStarted> & Record<'onDetectUpdated', CallDetectUpdated> & Record<'onDetectEnded', CallDetectEnded>;
/**
 * Call Playback
 */
export declare type CallPlaybackEvents = Record<CallPlaybackStarted | CallPlaybackUpdated | CallPlaybackEnded | CallPlaybackFailed, (playback: CallPlayback) => void>;
export interface CallPlaybackListeners {
    onStarted?: (playback: CallPlayback) => unknown;
    onUpdated?: (playback: CallPlayback) => unknown;
    onFailed?: (playback: CallPlayback) => unknown;
    onEnded?: (playback: CallPlayback) => unknown;
}
export declare type CallPlaybackListenersEventsMapping = Record<'onStarted', CallPlaybackStarted> & Record<'onUpdated', CallPlaybackUpdated> & Record<'onFailed', CallPlaybackFailed> & Record<'onEnded', CallPlaybackEnded>;
export interface CallPlayMethodParams {
    playlist: VoicePlaylist;
    listen?: CallPlaybackListeners;
}
export interface CallPlayAudioMethodarams extends VoiceCallPlayAudioMethodParams {
    listen?: CallPlaybackListeners;
}
export interface CallPlaySilenceMethodParams extends VoiceCallPlaySilenceMethodParams {
    listen?: CallPlaybackListeners;
}
export interface CallPlayRingtoneMethodParams extends VoiceCallPlayRingtoneMethodParams {
    listen?: CallPlaybackListeners;
}
export interface CallPlayTTSMethodParams extends VoiceCallPlayTTSMethodParams {
    listen?: CallPlaybackListeners;
}
/**
 * Call Recording
 */
export declare type CallRecordingEvents = Record<CallRecordingStarted | CallRecordingUpdated | CallRecordingEnded | CallRecordingFailed, (recording: CallRecording) => void>;
export interface CallRecordingListeners {
    onStarted?: (recording: CallRecording) => unknown;
    onUpdated?: (recording: CallRecording) => unknown;
    onFailed?: (recording: CallRecording) => unknown;
    onEnded?: (recording: CallRecording) => unknown;
}
export declare type CallRecordingListenersEventsMapping = Record<'onStarted', CallRecordingStarted> & Record<'onUpdated', CallRecordingUpdated> & Record<'onFailed', CallRecordingFailed> & Record<'onEnded', CallRecordingEnded>;
export interface CallRecordMethodParams extends VoiceCallRecordMethodParams {
    listen?: CallRecordingListeners;
}
export declare type CallRecordAudioMethodParams = VoiceCallRecordMethodParams['audio'] & {
    listen?: CallRecordingListeners;
};
/**
 * Call Prompt
 */
export declare type CallPromptEvents = Record<CallPromptStarted | CallPromptUpdated | CallPromptEnded | CallPromptFailed, (prompt: CallPrompt) => void>;
export interface CallPromptListeners {
    onStarted?: (prompt: CallPrompt) => unknown;
    onUpdated?: (prompt: CallPrompt) => unknown;
    onFailed?: (prompt: CallPrompt) => unknown;
    onEnded?: (prompt: CallPrompt) => unknown;
}
export declare type CallPromptListenersEventsMapping = Record<'onStarted', CallPromptStarted> & Record<'onUpdated', CallPromptUpdated> & Record<'onFailed', CallPromptFailed> & Record<'onEnded', CallPromptEnded>;
export declare type CallPromptMethodParams = VoiceCallPromptMethodParams & {
    listen?: CallPromptListeners;
};
export declare type CallPromptAudioMethodParams = VoiceCallPromptAudioMethodParams & {
    listen?: CallPromptListeners;
};
export declare type CallPromptRingtoneMethodParams = VoiceCallPromptRingtoneMethodParams & {
    listen?: CallPromptListeners;
};
export declare type CallPromptTTSMethodParams = VoiceCallPromptTTSMethodParams & {
    listen?: CallPromptListeners;
};
/**
 * Call Collect
 */
export declare type CallCollectEvents = Record<CallCollectStarted | CallCollectStartOfInput | CallCollectUpdated | CallCollectEnded | CallCollectFailed, (collect: CallCollect) => void>;
export interface CallCollectListeners {
    onStarted?: (collect: CallCollect) => unknown;
    onInputStarted?: (collect: CallCollect) => unknown;
    onUpdated?: (collect: CallCollect) => unknown;
    onFailed?: (collect: CallCollect) => unknown;
    onEnded?: (collect: CallCollect) => unknown;
}
export declare type CallCollectListenersEventsMapping = Record<'onStarted', CallCollectStarted> & Record<'onInputStarted', CallCollectStartOfInput> & Record<'onUpdated', CallCollectUpdated> & Record<'onFailed', CallCollectFailed> & Record<'onEnded', CallCollectEnded>;
export declare type CallCollectMethodParams = VoiceCallCollectMethodParams & {
    listen?: CallCollectListeners;
};
/**
 * Call Tap
 */
export declare type CallTapEvents = Record<CallTapStarted | CallTapEnded, (tap: CallTap) => void>;
export interface CallTapListeners {
    onStarted?: (tap: CallTap) => unknown;
    onEnded?: (tap: CallTap) => unknown;
}
export declare type CallTapListenersEventsMapping = Record<'onStarted', CallTapStarted> & Record<'onEnded', CallTapEnded>;
export declare type CallTapMethodParams = VoiceCallTapMethodParams & {
    listen?: CallTapListeners;
};
export declare type CallTapAudioMethodParams = VoiceCallTapAudioMethodParams & {
    listen?: CallTapListeners;
};
/**
 * Call Detect
 */
export declare type CallDetectEvents = Record<CallDetectStarted | CallDetectUpdated | CallDetectEnded, (tap: CallDetect) => void>;
export interface CallDetectListeners {
    onStarted?: (detect: CallDetect) => unknown;
    onUpdated?: (detect: CallDetect) => unknown;
    onEnded?: (detect: CallDetect) => unknown;
}
export declare type CallDetectListenersEventsMapping = Record<'onStarted', CallDetectStarted> & Record<'onUpdated', CallDetectUpdated> & Record<'onEnded', CallDetectEnded>;
export declare type CallDetectMethodParams = VoiceCallDetectMethodParams & {
    listen?: CallDetectListeners;
};
export interface CallDetectMachineParams extends Omit<VoiceCallDetectMachineParams, 'type'> {
    listen?: CallDetectListeners;
}
export interface CallDetectFaxParams extends Omit<VoiceCallDetectFaxParams, 'type'> {
    listen?: CallDetectListeners;
}
export interface CallDetectDigitParams extends Omit<VoiceCallDetectDigitParams, 'type'> {
    listen?: CallDetectListeners;
}
//# sourceMappingURL=voice.d.ts.map